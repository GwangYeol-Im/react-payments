{"version":3,"sources":["utils/constants.js","utils/throwError.js","utils/checkValidation.js","utils/getId.js","utils/replaceValue.js","components/Card/CardShape.jsx","components/Card/Card.jsx","components/Button/Button.jsx","components/Input/Input.jsx","components/InputTitle/InputTitle.jsx","components/CardAddPage/CardNumbersInput.jsx","components/CardAddPage/ExpirationDateInput.jsx","components/CardAddPage/OwnerNameInput.jsx","components/CardAddPage/SecurityCodeInput.jsx","components/CardAddPage/CardPasswordInput.jsx","components/Dimmer/Dimmer.jsx","components/Bank/Bank.jsx","components/BankSelector/BankSelector.jsx","components/Header/Header.jsx","components/CardAddPage/CardAddPage.jsx","components/CardAddCompletion/CardAddCompletion.jsx","components/CardListPage/CardListPage.jsx","App.jsx","utils/localStorage.js","index.js"],"names":["LS_KEY","PAGE","ERROR_TYPE","VALIDATION","CARD_INFO","BACKGROUND_COLOR","BANK","CARD_NUMBERS","EXPIRATION_MONTH","EXPIRATION_YEAR","OWNER_NAME","SECURITY_CODE","CARD_PASSWORDS","NICKNAME","LENGTH","MIN","MAX","CARD_DISPLAY","REG_EXP","RegExp","throwError","message","type","Object","values","includes","Error","error","validation","cardNumbers","Array","isArray","TypeError","every","cardNumber","length","month","Number","year","currentYear","Date","getFullYear","Math","abs","name","test","code","cardPasswords","password","checkValidation","inputName","value","getId","index","round","random","generateIdMaker","replace","ownerName","slice","toUpperCase","nickname","replaceValue","CardShape","backgroundColor","scale","isRegistered","children","onClick","className","classNames","CardInfo","props","bank","numbers","map","number","expirationDate","Card","cardShapeProps","cardInfoProps","Button","rest","Input","InputTitle","innerText","inputProps","id","CardNumbersInput","isValid","onChange","htmlFor","Fragment","data-index","minLength","maxLength","required","ExpirationDateInput","expirationMonth","expirationYear","placeholder","OwnerNameInput","min","max","ToolTip","useState","isDescVisible","setDescVisible","width","height","viewBox","fill","xmlns","cx","cy","r","stroke","d","SecurityCodeInput","securityCode","CardPasswordInput","Dimmer","Bank","bankInfos","BankSelector","bankProps","Header","title","hasBackButton","strokeWidth","CardAddPage","cardInfo","addBank","onInputChange","routeToBack","routeToNext","isBankSelectorVisible","setBankSelectorVisible","handleBankSelectorVisible","onSubmit","event","preventDefault","Boolean","CardAddCompletion","submitCardInfo","CardListPage","cardInfos","initialCardInfo","initialValidation","App","key","currentPage","setCurrentPage","JSON","parse","localStorage","getItem","setCardInfos","newCardInfo","setNewCardInfo","setValidation","handleInputChange","target","dataset","targetIndex","replacedValue","newValue","isNaN","prevValue","console","newCardInfos","setItem","stringify","setLocalStorage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fba1796a.chunk.js","sourcesContent":["export const LS_KEY = {\n  CARD_INFOS: \"cardInfos\",\n};\n\nexport const PAGE = {\n  CARD_LIST: \"cardList\",\n  CARD_ADD: \"cardAdd\",\n  CARD_ADD_COMPLETION: \"cardAddCompletion\",\n};\n\nexport const ERROR_TYPE = {\n  VALIDATION: \"validation\",\n};\n\nexport const CARD_INFO = {\n  BACKGROUND_COLOR: \"backgroundColor\",\n  BANK: \"bank\",\n  CARD_NUMBERS: \"cardNumbers\",\n  EXPIRATION_MONTH: \"expirationMonth\",\n  EXPIRATION_YEAR: \"expirationYear\",\n  OWNER_NAME: \"ownerName\",\n  SECURITY_CODE: \"securityCode\",\n  CARD_PASSWORDS: \"cardPasswords\",\n  NICKNAME: \"nickname\",\n};\n\nexport const LENGTH = {\n  CARD_NUMBER: {\n    MIN: 4,\n    MAX: 4,\n  },\n  EXPIRATION_DATE: {\n    MIN: 2,\n    MAX: 2,\n  },\n  OWNER_NAME: {\n    MIN: 0,\n    MAX: 30,\n    CARD_DISPLAY: 10,\n  },\n  SECURITY_CODE: {\n    MIN: 3,\n    MAX: 4,\n  },\n  CARD_PASSWORDS: {\n    MIN: 1,\n    MAX: 1,\n  },\n  NICKNAME: {\n    MIN: 0,\n    MAX: 10,\n  },\n};\n\nexport const REG_EXP = {\n  OWNER_NAME: new RegExp(`^[가-힣|A-Z|\\\\s]{${LENGTH.OWNER_NAME.MIN},${LENGTH.OWNER_NAME.MAX}}$`),\n  NICKNAME: new RegExp(`^[가-힣|A-Z|\\\\s]{${LENGTH.NICKNAME.MIN},${LENGTH.NICKNAME.MAX}}$`),\n};\n","import { ERROR_TYPE } from \"./constants\";\n\nconst throwError = (message, type) => {\n  if (!Object.values(ERROR_TYPE).includes(type)) {\n    throw new Error(\"Invalid error type: \", type);\n  }\n\n  const error = new Error(message);\n\n  error.type = type;\n\n  throw error;\n};\n\nexport default throwError;\n","import { CARD_INFO, ERROR_TYPE, LENGTH, REG_EXP } from \"./constants\";\nimport throwError from \"./throwError\";\n\nconst validateCardNumbers = cardNumbers => {\n  if (!Array.isArray(cardNumbers)) {\n    throw new TypeError(\"cardNumbers should be an array\");\n  }\n\n  return cardNumbers.every(\n    cardNumber => LENGTH.CARD_NUMBER.MIN <= cardNumber.length && cardNumber.length <= LENGTH.CARD_NUMBER.MAX\n  );\n};\n\nconst validateExpirationMonth = month => {\n  if (typeof month !== \"string\") {\n    throw new TypeError(\"month should be a string\");\n  }\n\n  return 1 <= Number(month) && Number(month) <= 12;\n};\n\nconst validateExpirationYear = year => {\n  if (typeof year !== \"string\") {\n    throw new TypeError(\"year should be a string\");\n  }\n\n  const currentYear = new Date().getFullYear() - 2000;\n\n  return Math.abs(Number(year) - currentYear) <= 5;\n};\n\nconst validateOwnerName = name => {\n  if (typeof name !== \"string\") {\n    throw new TypeError(\"ownerName should be a string\");\n  }\n\n  return REG_EXP.OWNER_NAME.test(name);\n};\n\nconst validateSecurityCode = code => {\n  if (typeof code !== \"string\") {\n    throw new TypeError(\"securityCode should be a string\");\n  }\n\n  return LENGTH.SECURITY_CODE.MIN <= code.length && code.length <= LENGTH.SECURITY_CODE.MAX;\n};\n\nconst validateCardPasswords = cardPasswords => {\n  if (!Array.isArray(cardPasswords)) {\n    throw new TypeError(\"cardPasswords should be an array\");\n  }\n\n  return cardPasswords.every(\n    password => LENGTH.CARD_PASSWORDS.MIN <= password.length && password.length <= LENGTH.CARD_PASSWORDS.MAX\n  );\n};\n\nconst validateNickname = name => {\n  if (typeof name !== \"string\") {\n    throw new TypeError(\"nickname should be a string\");\n  }\n\n  return REG_EXP.NICKNAME.test(name);\n};\n\nconst validation = {\n  [CARD_INFO.CARD_NUMBERS]: validateCardNumbers,\n  [CARD_INFO.EXPIRATION_MONTH]: validateExpirationMonth,\n  [CARD_INFO.EXPIRATION_YEAR]: validateExpirationYear,\n  [CARD_INFO.OWNER_NAME]: validateOwnerName,\n  [CARD_INFO.SECURITY_CODE]: validateSecurityCode,\n  [CARD_INFO.CARD_PASSWORDS]: validateCardPasswords,\n  [CARD_INFO.NICKNAME]: validateNickname,\n};\n\nconst checkValidation = (inputName, value) => {\n  try {\n    if (!Object.values(CARD_INFO).includes(inputName)) {\n      throw new TypeError(\"Invalid validation name\");\n    }\n\n    const isValid = validation[inputName](value);\n\n    if (!isValid) {\n      throwError(inputName, ERROR_TYPE.VALIDATION);\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default checkValidation;\n","const generateIdMaker = () => {\n  const getRandomNumber = () => Math.round(Math.random() * 1000000000);\n  let index = 0;\n\n  return () => `${getRandomNumber()}-${index++}`;\n};\n\nconst getId = generateIdMaker();\n\nexport default getId;\n","import { CARD_INFO, LENGTH } from \"./constants\";\n\nconst replaceOwnerName = ownerName => {\n  if (ownerName.length > LENGTH.OWNER_NAME.MAX) {\n    ownerName = ownerName.slice(LENGTH.OWNER_NAME.MIN, LENGTH.OWNER_NAME.MAX);\n  }\n\n  return ownerName.toUpperCase();\n};\n\nconst replaceNickname = nickname => {\n  return nickname.slice(0, LENGTH.NICKNAME.MAX);\n};\n\nconst replace = {\n  [CARD_INFO.OWNER_NAME]: replaceOwnerName,\n  [CARD_INFO.NICKNAME]: replaceNickname,\n};\n\nconst replaceValue = (inputName, value) => {\n  try {\n    if (!Object.values(CARD_INFO).includes(inputName)) {\n      throw new TypeError(\"Invalid validation name\");\n    }\n    if (typeof value !== \"string\") {\n      throw new TypeError(`${inputName} should be a string`);\n    }\n\n    return replace[inputName] ? replace[inputName](value) : value.replace(/[\\D]/g, \"\");\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default replaceValue;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nconst CardShape = ({ backgroundColor, scale, isRegistered, children, onClick }) => (\n  <div\n    className={classNames(\n      \"rounded-md shadow-md p-3 relative transform w-52 h-32\",\n      backgroundColor || \"bg-custom-gray-200\",\n      scale,\n      typeof onClick === \"function\" && \"cursor-pointer\"\n    )}\n    onClick={onClick}\n  >\n    {!isRegistered && (\n      <>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 flex items-center justify-center rounded-full bg-gray-600 opacity-50\"></div>\n        <span className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-gray-800\">+</span>\n      </>\n    )}\n    {children}\n  </div>\n);\n\nexport default CardShape;\n","import React from \"react\";\nimport { getId } from \"../../utils\";\nimport CardShape from \"./CardShape\";\n\nconst CardInfo = props => (\n  <>\n    <div className=\"text-xs text-custom-darkgray mb-4 h-4\">{props.bank}</div>\n    <div className=\"w-10 h-6.5 bg-custom-gold rounded mb-2\"></div>\n    <div className=\"flex flex-col text-custom-gray-300 items-center\">\n      <div className=\"flex space-x-2.5 text-sm h-5\">\n        {props.numbers?.map(number => (\n          <span key={getId()}>{number}</span>\n        ))}\n      </div>\n      <div className=\"text-sm w-11/12 flex justify-between\">\n        <span>{props.ownerName || \"NAME\"}</span>\n        <span>{props.expirationDate === \"/\" ? \"MM/YY\" : props.expirationDate}</span>\n      </div>\n    </div>\n  </>\n);\n\nconst Card = ({ backgroundColor, scale, isRegistered, bank, numbers, ownerName, expirationDate, onClick }) => {\n  const cardShapeProps = { backgroundColor, scale, isRegistered, onClick };\n  const cardInfoProps = { bank, numbers, ownerName, expirationDate };\n\n  return (\n    <CardShape {...cardShapeProps}>\n      <CardInfo {...cardInfoProps} />\n    </CardShape>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nconst Button = props => {\n  const { name, className, ...rest } = props;\n\n  return (\n    <button className={classNames(\"font-bold text-sm text-right text-custom-mint\", className)} {...rest}>\n      {name}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nconst Input = props => {\n  const { className, ...rest } = props;\n\n  return (\n    <input\n      className={classNames(\n        \"rounded-md bg-custom-gray-100 text-custom-mint h-11 placeholder-center p-3 text-lg font-medium\",\n        className\n      )}\n      {...rest}\n    />\n  );\n};\n\nexport default Input;\n","import React from \"react\";\n\nconst InputTitle = props => <span className=\"text-custom-gray-300 font-medium text-xs\">{props.innerText}</span>;\n\nexport default InputTitle;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport Input from \"../Input/Input\";\nimport InputTitle from \"../InputTitle/InputTitle\";\nimport { CARD_INFO, getId, LENGTH } from \"../../utils\";\n\nconst inputProps = [\n  { id: getId(), type: \"text\" },\n  { id: getId(), type: \"text\" },\n  { id: getId(), type: \"password\" },\n  { id: getId(), type: \"password\" },\n];\n\nconst CardNumbersInput = ({ cardNumbers, isValid, onChange }) => {\n  return (\n    <div className={classNames(\"flex flex-col w-full mb-2\", !isValid && \"\")}>\n      <div className=\"mb-2 h-6\">\n        <InputTitle innerText=\"카드 번호\" />\n      </div>\n      <label className=\"sr-only\" htmlFor=\"card-number-input\">\n        카드 번호 입력란\n      </label>\n      <div\n        className={classNames(\n          \"bg-custom-gray-100 rounded-md flex justify-around items-center text-custom-mint text-lg font-medium\",\n          !isValid && \"ring-2 ring-rose-400\"\n        )}\n      >\n        {inputProps.map(({ id, type }, index) => (\n          <React.Fragment key={id}>\n            {index > 0 && \"-\"}\n            <label htmlFor={`card-number-input-${index}`}></label>\n            <Input\n              id={`card-number-input-${index}`}\n              type={type}\n              className=\"w-1/5 outline-none\"\n              name={CARD_INFO.CARD_NUMBERS}\n              data-index={index}\n              minLength={LENGTH.CARD_NUMBER.MIN}\n              maxLength={LENGTH.CARD_NUMBER.MAX}\n              onChange={onChange}\n              value={cardNumbers[index]}\n              required\n            />\n          </React.Fragment>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CardNumbersInput;\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport { CARD_INFO, LENGTH } from \"../../utils\";\nimport Input from \"../Input/Input\";\nimport InputTitle from \"../InputTitle/InputTitle\";\n\nconst ExpirationDateInput = ({ expirationMonth, expirationYear, isValid, onChange }) => {\n  return (\n    <>\n      <div className=\"mb-2 h-6\">\n        <InputTitle innerText=\"만료일\" />\n      </div>\n      <div\n        className={classNames(\n          \"w-1/3 bg-custom-gray-100 rounded-md flex justify-around items-center text-custom-mint text-lg font-medium\",\n          !isValid && \"ring-2 ring-rose-400\"\n        )}\n      >\n        <label className=\"sr-only\" htmlFor=\"expiration-month-input\">\n          만료 월 입력란\n        </label>\n        <Input\n          id=\"expiration-month-input\"\n          type=\"text\"\n          className=\"w-1/2 outline-none placeholder-center\"\n          name={CARD_INFO.EXPIRATION_MONTH}\n          placeholder=\"MM\"\n          minLength={LENGTH.EXPIRATION_DATE.MIN}\n          maxLength={LENGTH.EXPIRATION_DATE.MAX}\n          value={expirationMonth}\n          onChange={onChange}\n          required\n        />\n        /\n        <label className=\"sr-only\" htmlFor=\"expiration-year-input\">\n          만료 연도 입력란\n        </label>\n        <Input\n          id=\"expiration-year-input\"\n          type=\"text\"\n          className=\"w-1/2 outline-none\"\n          name={CARD_INFO.EXPIRATION_YEAR}\n          placeholder=\"YY\"\n          minLength={LENGTH.EXPIRATION_DATE.MIN}\n          maxLength={LENGTH.EXPIRATION_DATE.MAX}\n          value={expirationYear}\n          onChange={onChange}\n          required\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ExpirationDateInput;\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport Input from \"../Input/Input\";\nimport InputTitle from \"../InputTitle/InputTitle\";\nimport { CARD_INFO, LENGTH } from \"../../utils\";\n\nconst OwnerNameInput = ({ ownerName, isValid, onChange }) => {\n  return (\n    <>\n      <div className=\"mb-2 h-6 flex justify-between items-center\">\n        <InputTitle innerText=\"카드 소유자 이름(선택)\" />\n        <span className=\"text-custom-gray-300 font-medium text-xs\">\n          {ownerName.length}/{LENGTH.OWNER_NAME.MAX}\n        </span>\n      </div>\n      <label className=\"sr-only\" htmlFor=\"owner-name-input\">\n        카드 소유자 이름 입력란\n      </label>\n      <Input\n        id=\"owner-name-input\"\n        type=\"text\"\n        placeholder=\"카드에 표시된 이름과 동일하게 입력하세요.\"\n        name={CARD_INFO.OWNER_NAME}\n        className={classNames(\"w-full outline-none\", !isValid && \"ring-2 ring-rose-400\")}\n        min={LENGTH.OWNER_NAME.MIN}\n        max={LENGTH.OWNER_NAME.MAX}\n        value={ownerName}\n        onChange={onChange}\n      />\n    </>\n  );\n};\n\nexport default OwnerNameInput;\n","import classNames from \"classnames\";\nimport React, { useState } from \"react\";\nimport Input from \"../Input/Input\";\nimport InputTitle from \"../InputTitle/InputTitle\";\nimport { CARD_INFO, LENGTH } from \"../../utils\";\n\nconst ToolTip = () => {\n  const [isDescVisible, setDescVisible] = useState(false);\n\n  const handleToolTipClick = () => {\n    setDescVisible(!isDescVisible);\n  };\n\n  return (\n    <>\n      <svg\n        width=\"27\"\n        height=\"27\"\n        className=\"ml-3 cursor-pointer\"\n        viewBox=\"0 0 27 27\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        onClick={handleToolTipClick}\n      >\n        <circle cx=\"13.5\" cy=\"13.5\" r=\"13\" fill=\"white\" stroke=\"#BABABA\" />\n        <path\n          d=\"M12.5547 16.8203C12.5547 15.9544 12.6621 15.2643 12.877 14.75C13.0918 14.2357 13.515 13.6725 14.1465 13.0605C14.7845 12.4421 15.1882 12.0026 15.3574 11.7422C15.6178 11.3451 15.748 10.9154 15.748 10.4531C15.748 9.84115 15.5951 9.37565 15.2891 9.05664C14.9896 8.73112 14.5469 8.56836 13.9609 8.56836C13.401 8.56836 12.9486 8.72786 12.6035 9.04688C12.265 9.35938 12.0957 9.78581 12.0957 10.3262H9.72266C9.73568 9.17383 10.1263 8.26237 10.8945 7.5918C11.6693 6.92122 12.6914 6.58594 13.9609 6.58594C15.2695 6.58594 16.2884 6.91797 17.0176 7.58203C17.7533 8.24609 18.1211 9.17383 18.1211 10.3652C18.1211 11.4264 17.6263 12.4714 16.6367 13.5L15.4355 14.6816C15.0059 15.1699 14.7845 15.8828 14.7715 16.8203H12.5547ZM12.3887 19.8574C12.3887 19.4733 12.5091 19.1641 12.75 18.9297C12.9909 18.6888 13.3164 18.5684 13.7266 18.5684C14.1432 18.5684 14.472 18.6921 14.7129 18.9395C14.9538 19.1803 15.0742 19.4863 15.0742 19.8574C15.0742 20.2155 14.957 20.515 14.7227 20.7559C14.4883 20.9967 14.1562 21.1172 13.7266 21.1172C13.2969 21.1172 12.9648 20.9967 12.7305 20.7559C12.5026 20.515 12.3887 20.2155 12.3887 19.8574Z\"\n          fill=\"#969696\"\n        />\n      </svg>\n      {isDescVisible && (\n        <>\n          <span className=\"w-0 h-0 border-8 border-custom-darkgray left-arrow\"></span>\n          <span className=\"bg-custom-darkgray rounded-lg p-1 text-custom-white text-xs\">\n            카드 뒷면 서명란 끝의 3~4자리 숫자를 입력해주세요.\n          </span>\n        </>\n      )}\n    </>\n  );\n};\n\nconst SecurityCodeInput = ({ securityCode, isValid, onChange }) => {\n  return (\n    <>\n      <div className=\"mb-2 h-6\">\n        <InputTitle innerText=\"보안코드(CVC/CVV)\" />\n      </div>\n      <label className=\"sr-only\" htmlFor=\"security-code-input\">\n        보안 코드 입력란\n      </label>\n      <div className=\"flex items-center\">\n        <Input\n          type=\"password\"\n          className={classNames(\"w-20 outline-none\", !isValid && \"ring-2 ring-rose-400\")}\n          name={CARD_INFO.SECURITY_CODE}\n          minLength={LENGTH.SECURITY_CODE.MIN}\n          maxLength={LENGTH.SECURITY_CODE.MAX}\n          value={securityCode}\n          onChange={onChange}\n          required\n        />\n        <ToolTip />\n      </div>\n    </>\n  );\n};\n\nexport default SecurityCodeInput;\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport { CARD_INFO, getId, LENGTH } from \"../../utils\";\nimport Input from \"../Input/Input\";\nimport InputTitle from \"../InputTitle/InputTitle\";\n\nconst inputProps = [{ id: getId() }, { id: getId() }];\n\nconst CardPasswordInput = ({ cardPasswords, isValid, onChange }) => {\n  return (\n    <>\n      <div className=\"mb-2 h-6\">\n        <InputTitle innerText=\"카드 비밀번호\" />\n      </div>\n      <div className=\"flex items-center justify-between w-48\">\n        {inputProps.map(({ id }, index) => (\n          <React.Fragment key={id}>\n            <label className=\"sr-only\" htmlFor=\"card-password-input-1\"></label>\n            <Input\n              type=\"password\"\n              className={classNames(\"w-10 outline-none text-center\", !isValid && \"ring-2 ring-rose-400\")}\n              data-index={index}\n              name={CARD_INFO.CARD_PASSWORDS}\n              minLength={LENGTH.CARD_PASSWORDS.MIN}\n              maxLength={LENGTH.CARD_PASSWORDS.MAX}\n              value={cardPasswords[index]}\n              onChange={onChange}\n            />\n          </React.Fragment>\n        ))}\n        <div className=\"w-10 flex justify-center\">\n          <svg width=\"5\" height=\"5\" viewBox=\"0 0 5 5\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"2.5\" cy=\"2.5\" r=\"2.5\" fill=\"#04C09E\" />\n          </svg>\n        </div>\n        <div className=\"w-10 flex justify-center\">\n          <svg width=\"5\" height=\"5\" viewBox=\"0 0 5 5\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"2.5\" cy=\"2.5\" r=\"2.5\" fill=\"#04C09E\" />\n          </svg>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default CardPasswordInput;\n","import React from \"react\";\n\nconst Dimmer = ({ onClick }) => (\n  <div className=\"absolute top-0 left-0 z-10 w-full h-screen bg-black bg-opacity-50\" onClick={onClick}></div>\n);\n\nexport default Dimmer;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nconst Bank = ({ backgroundColor, bank, onClick }) => {\n  const handleBankClick = () => onClick(backgroundColor, bank);\n\n  return (\n    <div className=\"w-1/4 flex flex-col items-center cursor-pointer\" onClick={handleBankClick}>\n      <div className={classNames(\"w-9 h-9 rounded-full mb-2.5\", backgroundColor)}></div>\n      <div className=\"font-medium text-xs text-custom-gray-300\">{bank}</div>\n    </div>\n  );\n};\n\nexport default Bank;\n","import React from \"react\";\nimport { getId } from \"../../utils\";\nimport Bank from \"../Bank/Bank\";\n\nconst bankInfos = [\n  { backgroundColor: \"bg-custom-red\", bank: \"국민\" },\n  { backgroundColor: \"bg-custom-blue\", bank: \"삼성\" },\n  { backgroundColor: \"bg-custom-green\", bank: \"농협\" },\n  { backgroundColor: \"bg-custom-purple\", bank: \"BC\" },\n  { backgroundColor: \"bg-custom-gradient-mint\", bank: \"배민\" },\n  { backgroundColor: \"bg-custom-pink\", bank: \"신한\" },\n  { backgroundColor: \"bg-custom-orange\", bank: \"제주\" },\n  { backgroundColor: \"bg-custom-yellow\", bank: \"카카오\" },\n];\n\nconst BankSelector = ({ onClick }) => (\n  <div className=\"flex justify-center items-center rounded-t-md bg-custom-white w-full  h-56 absolute left-0 bottom-0 z-20\">\n    <div className=\"flex flex-wrap m-auto gap-y-6\">\n      {bankInfos.map(bankProps => (\n        <Bank key={getId()} {...bankProps} onClick={onClick} />\n      ))}\n    </div>\n  </div>\n);\n\nexport default BankSelector;\n","import classNames from \"classnames\";\nimport React from \"react\";\n\nconst Header = ({ title, hasBackButton, onClick }) => (\n  <header className=\"w-full mb-5\">\n    <div className=\"w-25 flex items-center\">\n      <button className={classNames(\"bg-opacity-0\", \"mr-4\", !hasBackButton && \"invisible\")} onClick={onClick}>\n        <svg width=\"17\" height=\"17\" viewBox=\"0 0 17 17\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M8.30424 1L1.36474 8.78658L9.15132 15.7261\" stroke=\"#525252\" strokeWidth=\"1.5\" />\n        </svg>\n      </button>\n      <span className=\"font-medium text-base\">{title}</span>\n    </div>\n  </header>\n);\nexport default Header;\n","import React, { useState } from \"react\";\nimport Card from \"../Card/Card\";\nimport Button from \"../Button/Button\";\nimport CardNumbersInput from \"./CardNumbersInput\";\nimport ExpirationDateInput from \"./ExpirationDateInput\";\nimport OwnerNameInput from \"./OwnerNameInput\";\nimport SecurityCodeInput from \"./SecurityCodeInput\";\nimport CardPasswordInput from \"./CardPasswordInput\";\nimport Dimmer from \"../Dimmer/Dimmer\";\nimport BankSelector from \"../BankSelector/BankSelector\";\nimport Header from \"../Header/Header\";\nimport { LENGTH } from \"../../utils\";\n\nconst CardAddPage = ({ cardInfo, validation, addBank, onInputChange, routeToBack, routeToNext }) => {\n  const [isBankSelectorVisible, setBankSelectorVisible] = useState(false);\n\n  const handleBankSelectorVisible = () => {\n    setBankSelectorVisible(!isBankSelectorVisible);\n  };\n\n  const handleBankClick = (backgroundColor, bank) => {\n    addBank(backgroundColor, bank);\n    handleBankSelectorVisible();\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    routeToNext();\n  };\n\n  return (\n    <>\n      <Header title={\"카드 추가\"} hasBackButton={true} onClick={routeToBack} />\n      <form className=\"w-full h-160 flex flex-col justify-center\" onSubmit={handleFormSubmit}>\n        <div className=\"w-full flex justify-center mb-4\">\n          <Card\n            backgroundColor={cardInfo.backgroundColor}\n            bank={cardInfo.bank}\n            numbers={cardInfo.cardNumbers}\n            expirationDate={cardInfo.expirationMonth + \"/\" + cardInfo.expirationYear}\n            ownerName={cardInfo.ownerName.slice(0, LENGTH.OWNER_NAME.CARD_DISPLAY)}\n            isRegistered={false}\n            onClick={handleBankSelectorVisible}\n          />\n        </div>\n        <div>\n          <div className=\"flex flex-col w-full mb-2\">\n            <CardNumbersInput\n              cardNumbers={cardInfo.cardNumbers}\n              isValid={validation.cardNumbers ?? true}\n              onChange={onInputChange}\n            />\n          </div>\n          <div className=\"flex flex-col mb-2\">\n            <ExpirationDateInput\n              expirationMonth={cardInfo.expirationMonth}\n              expirationYear={cardInfo.expirationYear}\n              isValid={(validation.expirationMonth && validation.expirationYear) ?? true}\n              onChange={onInputChange}\n            />\n          </div>\n          <div className=\"flex flex-col w-full mb-2\">\n            <OwnerNameInput ownerName={cardInfo.ownerName} isValid={validation.ownerName} onChange={onInputChange} />\n          </div>\n          <div className=\"flex flex-col w-full mb-2\">\n            <SecurityCodeInput\n              securityCode={cardInfo.securityCode}\n              isValid={validation.securityCode ?? true}\n              onChange={onInputChange}\n            />\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <CardPasswordInput\n              cardPasswords={cardInfo.cardPasswords}\n              isValid={validation.cardPasswords ?? true}\n              onChange={onInputChange}\n            />\n          </div>\n        </div>\n        {Object.values(validation).every(Boolean) && (\n          <div className=\"flex justify-end items-center w-full h-10 absolute bottom-5 right-5\">\n            <Button name=\"다음\" type=\"submit\" />\n          </div>\n        )}\n      </form>\n      {isBankSelectorVisible && (\n        <>\n          <Dimmer onClick={handleBankSelectorVisible} />\n          <BankSelector onClick={handleBankClick} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default CardAddPage;\n","import React from \"react\";\nimport Button from \"../Button/Button\";\nimport Card from \"../Card/Card\";\nimport { CARD_INFO, LENGTH } from \"../../utils\";\n\nconst CardAddCompletion = ({ cardInfo, onInputChange, submitCardInfo, routeToNext }) => {\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    submitCardInfo();\n    routeToNext();\n  };\n\n  return (\n    <>\n      <section className=\"w-full h-160 flex flex-col justify-center\">\n        <form onSubmit={handleFormSubmit}>\n          <div className=\"w-full h-full flex flex-col items-center\">\n            <h1 className=\"text-2xl mb-24\">카드등록이 완료되었습니다.</h1>\n            <Card\n              scale=\"scale-150\"\n              backgroundColor={cardInfo.backgroundColor}\n              bank={cardInfo.bank}\n              numbers={cardInfo.cardNumbers}\n              expirationDate={cardInfo.expirationMonth + \"/\" + cardInfo.expirationYear}\n              ownerName={cardInfo.ownerName.slice(0, LENGTH.OWNER_NAME.CARD_DISPLAY)}\n              isRegistered={true}\n            />\n            <input\n              name={CARD_INFO.NICKNAME}\n              className=\" text-custom-darkgray text-center font-normal text-lg border-b-2 border-custom-gray-250 focus:outline-none mt-16\"\n              min={LENGTH.NICKNAME.MIN}\n              max={LENGTH.NICKNAME.MAX}\n              value={cardInfo.nickname}\n              onChange={onInputChange}\n            />\n          </div>\n          <div className=\"flex justify-end items-center w-full h-10 absolute bottom-5 right-5\">\n            <Button name=\"확인\" />\n          </div>\n        </form>\n      </section>\n    </>\n  );\n};\n\nexport default CardAddCompletion;\n","import React from \"react\";\nimport { LENGTH } from \"../../utils\";\nimport Card from \"../Card/Card\";\nimport CardShape from \"../Card/CardShape\";\nimport Header from \"../Header/Header\";\n\nconst CardListPage = ({ cardInfos, routeToNext }) => {\n  return (\n    <>\n      <Header title={\"보유카드\"} hasBackButton={false} />\n      <section className=\"flex flex-col h-full items-center\">\n        {cardInfos.map(({ id, cardInfo }) => (\n          <React.Fragment key={id}>\n            <Card\n              backgroundColor={cardInfo.backgroundColor}\n              bank={cardInfo.bank}\n              numbers={cardInfo.cardNumbers}\n              expirationDate={cardInfo.expirationMonth + \"/\" + cardInfo.expirationYear}\n              ownerName={cardInfo.ownerName.slice(0, LENGTH.OWNER_NAME.CARD_DISPLAY)}\n              isRegistered={true}\n            />\n            <div className=\"font-medium text-lg mb-3\">{cardInfo.nickname}</div>\n          </React.Fragment>\n        ))}\n        <CardShape isRegistered={false} onClick={routeToNext} />\n      </section>\n    </>\n  );\n};\n\nexport default CardListPage;\n","import React, { useState } from \"react\";\nimport { CardAddPage, CardAddCompletion, CardListPage } from \"./components\";\nimport { CARD_INFO, checkValidation, getId, getLocalStorage, PAGE, replaceValue, setLocalStorage } from \"./utils\";\nimport { LS_KEY } from \"./utils\";\n\nconst initialCardInfo = {\n  [CARD_INFO.BACKGROUND_COLOR]: \"\",\n  [CARD_INFO.BANK]: \"\",\n  [CARD_INFO.CARD_NUMBERS]: [\"\", \"\", \"\", \"\"],\n  [CARD_INFO.EXPIRATION_MONTH]: \"\",\n  [CARD_INFO.EXPIRATION_YEAR]: \"\",\n  [CARD_INFO.OWNER_NAME]: \"\",\n  [CARD_INFO.SECURITY_CODE]: \"\",\n  [CARD_INFO.CARD_PASSWORDS]: [\"\", \"\"],\n  [CARD_INFO.NICKNAME]: \"\",\n};\n\nconst initialValidation = {\n  [CARD_INFO.BACKGROUND_COLOR]: null,\n  [CARD_INFO.BANK]: null,\n  [CARD_INFO.CARD_NUMBERS]: null,\n  [CARD_INFO.EXPIRATION_MONTH]: null,\n  [CARD_INFO.EXPIRATION_YEAR]: null,\n  [CARD_INFO.OWNER_NAME]: true,\n  [CARD_INFO.SECURITY_CODE]: null,\n  [CARD_INFO.CARD_PASSWORDS]: null,\n  [CARD_INFO.NICKNAME]: true,\n};\n\nconst App = () => {\n  const [currentPage, setCurrentPage] = useState(PAGE.CARD_LIST);\n  const [cardInfos, setCardInfos] = useState(getLocalStorage(LS_KEY.CARD_INFOS) ?? []);\n  const [newCardInfo, setNewCardInfo] = useState(initialCardInfo);\n  const [validation, setValidation] = useState(initialValidation);\n\n  const addBank = (backgroundColor, bank) => {\n    setNewCardInfo({ ...newCardInfo, [CARD_INFO.BACKGROUND_COLOR]: backgroundColor, [CARD_INFO.BANK]: bank });\n    setValidation({ ...validation, [CARD_INFO.BACKGROUND_COLOR]: true, [CARD_INFO.BANK]: true });\n  };\n\n  const handleInputChange = event => {\n    try {\n      const { name, value, dataset } = event.target;\n      const targetIndex = Number(dataset.index);\n      const replacedValue = replaceValue(name, value);\n      const newValue = !Number.isNaN(targetIndex)\n        ? newCardInfo[name].map((prevValue, index) => (index === targetIndex ? replacedValue : prevValue))\n        : replacedValue;\n\n      setNewCardInfo({ ...newCardInfo, [name]: newValue });\n      checkValidation(name, newValue);\n      setValidation({ ...validation, [name]: true });\n    } catch (error) {\n      if (error.type === \"validation\") {\n        setValidation({ ...validation, [error.message]: false });\n\n        return;\n      }\n\n      console.error(error.message);\n    }\n  };\n\n  const submitCardInfo = () => {\n    const newCardInfos = [...cardInfos, { id: getId(), cardInfo: newCardInfo }];\n\n    setLocalStorage(LS_KEY.CARD_INFOS, newCardInfos);\n    setCardInfos(newCardInfos);\n    setNewCardInfo(initialCardInfo);\n  };\n\n  return (\n    <div className=\"relative max-w-sm h-full p-5 mx-auto flex flex-col\">\n      {currentPage === PAGE.CARD_ADD && (\n        <CardAddPage\n          cardInfo={newCardInfo}\n          validation={validation}\n          addBank={addBank}\n          onInputChange={handleInputChange}\n          routeToBack={() => setCurrentPage(PAGE.CARD_LIST)}\n          routeToNext={() => setCurrentPage(PAGE.CARD_ADD_COMPLETION)}\n        />\n      )}\n      {currentPage === PAGE.CARD_ADD_COMPLETION && (\n        <CardAddCompletion\n          cardInfo={newCardInfo}\n          onInputChange={handleInputChange}\n          submitCardInfo={submitCardInfo}\n          routeToNext={() => setCurrentPage(PAGE.CARD_LIST)}\n        />\n      )}\n      {currentPage === PAGE.CARD_LIST && (\n        <CardListPage cardInfos={cardInfos} routeToNext={() => setCurrentPage(PAGE.CARD_ADD)} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","export function setLocalStorage(key, value) {\n  localStorage.setItem(key, JSON.stringify(value));\n}\n\nexport function getLocalStorage(key) {\n  return JSON.parse(localStorage.getItem(key));\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}